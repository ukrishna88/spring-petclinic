pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                sh 'pwd'
                sh 'ls -ltr'
                sh 'echo "$JOB_NAME"'
                sh 'echo "Build the project and create a JAR file"'
                sh './mvnw clean'
                sh './mvnw package -DskipTests=true'
                sh 'echo "Build generated successfully and created a JAR file"'
                //sh 'java -jar target/*.jar'
            }
        }    
        // stage('Test') {
        //     steps {
        //         sh 'ls -ltr'
        //         sh 'echo "Test the project"'
        //         sh './mvnw test'
        //     }
        //     post {
        //         always {
        //         junit '**/target/surefire-reports/TEST-*.xml'
        //         }
        //     }
        // }
        stage('Build Docker Image') {
            environment {
                DOCKER_IMAGE = "ukrishna88/spring-petclinic:${BUILD_NUMBER}"
                DOCKERFILE_LOCATION = "{$JOB_NAME}/Dockerfile" 
                //DOCKERFILE_LOCATION = "spring-petclinic/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'pwd'
                    sh 'ls -ltr'
                    sh 'echo "Building the Docker Image"'
                    sh 'docker info'
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                    sh 'echo "Building the Docker Image Complete"'
                }
            }
        } 
        // stage('Push Docker Build to Hub') {
        //     steps {
        //         script {
        //             sh 'pwd'
        //             sh 'ls -ltr'
        //             sh 'echo "Pushing the Docker Image to Docker Hub"'
        //                 withCredentials([string(credentialsId: 'docker', variable: 'docker')]){
        //                     sh 'docker login -u ukrishna88 -p ${docker-cred}'
        //                     sh 'docker push ukrishna88/spring-petclinic:${BUILD_NUMBER}'
        //                 }
        //             sh 'echo "Pushing the Docker Image to Docker Hub Complete"'
        //         }
        //     }
        // }
        // stage('Pull Docker Image from Hub') {
        //     steps {
        //         script {
        //             sh 'pwd'
        //             sh 'ls -ltr'
        //             sh 'echo "Pulling the Docker Image from the Docker Hub"'
        //             sh 'docker image pull ukrishna88/spring-petclinic:${BUILD_NUMBER}'
        //             sh 'docker images'    
        //                 /* withCredentials([string(credentialsId: 'docker', variable: 'docker')]){
        //                     sh 'docker login -u ukrishna88 -p ${docker-cred}'
        //                     sh 'docker image ukrishna88/spring-petclinic:${BUILD_NUMBER}'
        //                 } */
        //             sh 'echo "Pulling the Docker Image from the Docker Hub Complete"'
        //         }
        //     }
        // }
        stage('Saving Docker Image Locally') {
            steps {
                script {
                    sh 'pwd'
                    sh 'ls -ltr'
                    //sh 'echo "$HOME"'
                    sh 'echo "Saving the Docker Image Locally"'
                    //sh 'mkdir src/test/docker_compressed'
                    sh 'docker image save ukrishna88/spring-petclinic:${BUILD_NUMBER} >  /Users/krishnakumarulaganathan/spring-petclinic:${BUILD_NUMBER}.tar'
                    sh 'echo "Saving Docker Image Locally Successful"'
                }
            }
        }
        stage('Load & Run the Docker Image Locally') {
            steps {
                script {
                    sh 'pwd'
                    sh 'cd "/Users/krishnakumarulaganathan/"'
                    sh 'pwd'
                    sh 'echo "Loading the Docker Image from Local"'
                    //sh 'docker load < spring-petclinic:${BUILD_NUMBER}'
                    sh 'ls -ltr'
                    sh 'echo "Running the Docker Image from Local"'
                    //sh 'docker run -p 8081:8081 --name spring-petclinic ukrishna88/spring-petclinic:${BUILD_NUMBER} ' 
                    sh 'echo "Running the Docker Image from Local Successfully'
                }
            }
        }
        stage('Run the Docker Image Locally') {
                agent {
                    steps {
                        docker {
                            image 'ukrishna88/spring-petclinic:${BUILD_NUMBER}'
                            }
                    }
                }
        }
        /* stage('Update Docker File to Git') {
            environment {
                GIT_REPO_NAME = "spring-petclinic"
                GIT_USER_NAME = "ukrishna88"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]){
                    sh '''
                        git config user.email "ukrishna88@gmail.com"
                        git config user.name "Krishnakumar Ulaganathan"
                        git rev-parse --show-toplevel
                        git ls-files
                        git add .
                        git commit -m 'Added Uploading Docker File to Git'
                        git remote set url https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}
                        git push -u origin ${BRANCH}
                    '''
                }
                script {
                    sh 'cd "${WORKSPACE}"'
                    sh 'rm spring-petclinic/${BUILD_NUMBER}.tar'
                }
            }
        } */
        /* stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "spring-petclinic"
                GIT_USER_NAME = "ukrishna88"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]){
                    sh '''
                        git config user.email "ukrishna88@gmail.com"
                        git config user.name "Krishnakumar Ulaganathan"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        git ls-files -co
                        git rev-parse --show-toplevel
                        sed -i '' "s/replaceImageTag/${BUILD_NUMBER}/g" ${JOB_NAME}/deployment.yml
                        git add ${JOB_NAME}/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        } */
    }
}